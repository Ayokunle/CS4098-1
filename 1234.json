{"process_table": {"process": [{"action": [{"@state": "READY", "@name": "overview", "script": "\"<p>In this exercise, you will create a set of tests for the Web\n    interface to the PML virtual machine, using JUnit and HTTPUnit.\n    The procedure is an abbreviated version of Tamres incremental\n    approach; the baseline is provided for you, you just need to do\n    the inventory.</p><p>JUnit is a Java framework for creating and running unit and\n    functional tests.  HTTPUnit is a set of java classes that one\n    uses in conjunction with JUnit for testing web sites.</p>\""}, {"@state": "AVAILABLE", "prov_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_working_directory", "script": "\"<p>Create a working directory to contain the java files that\n      implement your tests.  You <b>must</b> set permissions on the\n      path to your working directory so that the PEOS web interface\n      can traverse the path and read your test files.</p><pre>\n      % cd\n      % chmod a+X .\n      % mkdir coen286\n      % chmod a+X coen286\n      % cd coen286\n      % mkdir web_test\n      % chmod a+Xr web_test\n      </pre><p>Please pay particular attention to the last <i>chmod</i>; you\n      must make your working directory both <i>executable</i> (`+X')\n      and <i>readable</i> (`+r'), \n      so that the PML Web interface can read and display your files\n      when requested.  The other directories need only be\n      <i>executable.</i></p><p>Note: this only grants read access to your working directory;\n      and only allows others to traverse, but not read, the\n      directories in the path leading to your working directory. This\n      enables the PEOS web interface to find your test files and other\n      resources in your working directory, but does not allow anyone to\n      actually list any of your directories except for your working\n      directory.</p>\""}, {"@state": "NONE", "prov_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_test_file", "script": "\"\n\n      HTTPUnit and JUnit are written in Java, and require tests to be\n      written in Java as well. Create a Java file to contain your test\n      code (called a Test Case in JUnit terminology).  You must also\n      set permissions on the test file so that the PEOS web interface\n      can traverse the path and read your test files.\n      <pre>\n      % cd ~/coen286/web_test\n      % touch WebUITest.java\n      % chmod a+r WebUITest.java\n      </pre>\n      Note: the last step is necessary to grant access to the PEOS web\n      ui.\n\n      Put the following skeleton in your java test file, then modify\n      the values of the <i>login</i> and <i>password</i> variables.\n      Set the <i>login</i> variable to the <i>test</i> id you received\n      via email; the password is the same for both IDs.\n      <pre>\n      import java.lang.*;\n      import com.meterware.httpunit.*;\n\n      import java.io.IOException;\n      import java.net.MalformedURLException;\n\n      import org.xml.sax.*;\n      import org.w3c.dom.*;\n\n      import junit.framework.*;\n\n\n      /**\n       * An example of testing web2 using httpunit and JUnit.\n       **/\n      public class WebUITest extends TestCase {\n\n\t  String site = &quot;http://linux.students.engr.scu.edu/~jnoll/PEOS/cgi-bin/&quot;;\n\t  String login = &quot;(your test login)&quot;;\n\t  String passwd = &quot;(your password)&quot;;\n\t  // Static, so initialization in Baseline persists.\n\t  static String proc_table; \n\n\n\t  public static void main(String args[]) {\n\t      junit.textui.TestRunner.run( suite() );\n\t  }\n\n\t  public static Test suite() {\n\t      return new TestSuite( WebUITest.class );\n\t  }\n\n\t  public WebUITest( String name ) {\n\t      super( name );\n\t  }\n\n\t  public void testBaseline () throws Exception {\n\t      assertTrue(0 == 0);\n\t  }\n      }\n      </pre><p>Be sure to include the <i>main()</i>and <i>suite()</i>methods in\n      addition to the constructor; JUnit uses these to run your tests.</p><p>Note: The JUnit <i>TestCase</i> class corresponds to our notion\n      of test procedures.  The methods of this class are close to our\n      concept of test case.</p><p>To verify that everything is set up correctly, this skeleton\n      includes a simple test method to your class that will be run by\n      JUnit when the test is run:</p><pre>\n      assertTrue(0 == 0);\n      </pre>\n      will result in a `.' appearing in the output, indicating a test\n      was run and passed.\n\n      \""}, {"@state": "NONE", "prov_resource": {"@name": "Makefile", "@value": "/Makefile", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_makefile", "script": "\"\n\n      Create a Makefile to automate the build and run cycle: \n      <pre>\n      % touch Makefile\n      % chmod a+r Makefile\n      </pre>\n      Put the following macros and rules in the Makefile (please be\n      sure to include the 'test' rule, so I can easily run your tests by\n      typing 'make test'). \n      <pre>\n      HTTPUNIT = /home/jnoll/lib/httpunit-1.5.4\n      CLASSPATH = .:..:$(HTTPUNIT)/lib/httpunit.jar:$(HTTPUNIT)/jars/junit.jar:$(HTTPUNIT)/jars/nekohtml.jar:$(HTTPUNIT)/jars/Tidy.jar:$(HTTPUNIT)/jars/xmlParserAPIs.jar:$(HTTPUNIT)/jars/xercesImpl.jar:$(HTTPUNIT)/jars/js.jar\n      \n      JAVAC = javac\n      JAVA = java\n      \n      test: WebUITest.class\n      \t       $(JAVA) -classpath $(CLASSPATH) WebUITest\n      \n      %.class: %.java\n\t       $(JAVAC) -classpath $(CLASSPATH) $<\n      </pre><p>Note: be sure the lines containing JAVA and JAVAC above are\n      preceded by a <i>tab</i> character; make will be confused otherwise.\n      </p>\""}, {"@state": "NONE", "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "verify_setup", "script": "\"\n\n      Verify that your environment has been set up correctly by\n      compiling and running the test.  To do this, you need to add\n      <i>javac</i> and <i>java</i> to your path, which is easily done\n      using the <i>setup</i> command:\n      <pre>\n      % setup jdk\n      % setup gcc\n      </pre>\n      This will automatically add the appropriate environment\n      variables for the current version of JDK, as well as\n      <i>gmake</i>, to your environment.\n\n      <p>Now, test your implementation:</p><pre>\n      % gmake test\n      </pre>\n      You should see something like the following: \n      <pre>\n[jnoll@linux101] ~/src/webtest :make\njavac -classpath .:..:/home/jnoll/lib/httpunit-1.5.4/lib/httpunit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/junit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/nekohtml.jar:/home/jnoll/lib/httpunit-1.5.4/jars/Tidy.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xmlParserAPIs.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xercesImpl.jar:/home/jnoll/lib/httpunit-1.5.4/jars/js.jar WebUITest.java\njava -classpath .:..:/home/jnoll/lib/httpunit-1.5.4/lib/httpunit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/junit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/nekohtml.jar:/home/jnoll/lib/httpunit-1.5.4/jars/Tidy.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xmlParserAPIs.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xercesImpl.jar:/home/jnoll/lib/httpunit-1.5.4/jars/js.jar WebUITest\n.\nTime: 0.003\n\nOK (1 test)\n\n[jnoll@linux101] ~/src/webtest :\n      </pre>\n      Notice the lone '.' before the ``Time: 0.026''.  This indicates\n      a test was run and passed.\n\n      \""}, {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "create_baseline", "script": "\"\n\n    Once you have a working test setup, augment it to interact with\n    the PEOS system. HTTPUnit provides several methods for\n    simulating interactions with a web site. You must first create a\n    ``conversation'' object to encapsulate the interactions with the\n    web site. First, set the <i>login</i> and <i>passwd</i>\n    variables to your <i>test</i> login id and passwd:\n    <pre>\n       String login = &quot;(your test login)&quot;;\n       String passwd = &quot;(your password)&quot;;\n    </pre>\n    Then, replace the body of your <i>testBaseline()</i> with the\n    following:\n    <pre>\n    public void testBaseline() throws Exception {\n    \t  WebConversation conversation = new WebConversation();\n    \t  conversation.setAuthorization(login, passwd);\n    \t  WebRequest request = \n\t      new GetMethodWebRequest(site + &quot;action_list.cgi&quot;);\n    \t  WebResponse response = conversation.getResponse(request);\n    \n    \t  // Verify title and heading of response page.\n    \t  String title = response.getTitle();\n    \t  assertNotNull(title);\n    \t  assertEquals(&quot;Action List&quot;, title);\n    \t  assertTrue(-1 != response.getText().indexOf(&quot;Action List&quot;));\n    \n    \t  // Save the name of the process table; required for future\n    \t  // tests that have to send process table name in the url.\n    \t  WebForm form = response.getForms()[0];\n    \t  proc_table = form.getParameterValue(&quot;process_filename&quot;);\n    \t  assertNotNull(proc_table);\n    }\n    </pre><p>First, note the <i>WebConversation</i> object in the above method\n    definition.  This object manages the sending and receiving of\n    requests and responses to and from the server. The conversation\n    also manages authentication, which is necessary for interacting\n    with the PEOS web site.  Therefore, you must include your test\n    login id and password in the code.</p><p>Next, observe how we sent a request to the web server.  This is\n    done using a <i>request</i> object that is returned by the\n    <i>GetMethodWebRequest()</i> method, which takes a URL as\n    argument.  We pass this object to the <i>WebConversation</i> to\n    send to the web server.  We get the reply contents by asking the\n    <i>WebConversation</i> for the <i>response</i> object.</p><p>The <i>response</i>object represents the reply from the web\n    server. This object can be queried for various constructs that\n    are part of the web page returned, including forms in the page,\n    and parameters in the forms. An important parameter you will\n    want to retrieve is the <i>process_filename</i>, which is the\n    name of the file that stores the process table for your\n    processes. (Each user gets a separate process table, with name\n    derived from the encrypted user name. This is to provide a\n    measure of privacy, so others can't easily obtain your process\n    state, or identify who belongs to a given process table.)\n    Declare an instance variable (say, <i>proc_table</i>) to hold\n    this name (you will need it later), and retrieve it from the\n    response:</p><pre>\n        WebForm form = response.getForms()[0];\n    \t  proc_table = form.getParameterValue(&quot;process_filename&quot;);\n    \t  assertNotNull(proc_table);\n    </pre>\n    Note the use of <i>assertNotNull()</i>. This is a JUnit\n    assertion to assert that its argument is not Null.\n\n    <p>Finally, we employ several HTTPUnit methods to examine the\n    response.  In particular, <i>getTitle()</i> returns the pages\n    title (obviously), and <i>getText()</i> returns the text (not the\n    header) of the page, as html if it is an html page.  For a\n    complete list of HTTPUnit operations, see the <a>HTTPUnit\n    API documentation</a>.</p>\""}, {"@state": "NONE", "prov_resource": {"@name": "readme", "@value": "/README", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_readme", "script": "\"\n    Create a README file in your working directory, that identifies\n    you and answers a few questions about your experience.  Use the\n    following template as a starting point:\n    <pre>\n      Ed Student\n      123456\n\n      Questions:\n      1. Did you use the ``Check to Indicate Done'' feature of the\n      Action List?\n\n      2. Did you perform any tasks out of order?\n\n      3. Did you ever click the ``Run'' and/or ``Done'' buttons of\n      the Action Page?\n\n      4a. Please assess the PEOS interface as more or less helpful than the\n      static web pages we have used to explain earlier assignments\n      (put an `X' in the box next to your assessment):\n      [ ] definitely more helpful \n      [ ] somewhat more helpful \n      [ ] somewhat less helpful \n      [ ] definitely less helpful\n\n      4b. Please write a brief explanation for your answer to part\n      (a).\n\n      5. Please write any other impressions about your experience\n      here.\n\n    </pre>\""}, {"@state": "NONE", "req_resource": [{"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, {"@name": "readme", "@value": "/README", "@qualifier": ""}], "@name": "submit_results", "script": "\"\n\n    Once you are satisfied with your test suite (and only after you\n    have verified that ALL tests compile and run), submit a tar file\n    via email, according to the <a>submit\n    procedure</a>.\n\n    \""}], "@status": "2", "@pid": "0", "iteration": {"action": [{"@state": "AVAILABLE", "@name": "select_inventory_item", "script": "\"<p>As mentioned previously, the test procedure is an abbreviated\n      form of Tamres incremental approach.  In this phase, you create\n      a test for each ``inventory'' item in the product's input.</p><p>The following cgi pages represent the inventory items to\n      test:</p><ul><li>action_list.cgi</li><li>create_process.cgi</li><li>action_page.cgi</li><li>bind_resources.cgi</li><li>delete_proc_table.cgi</li></ul><p>Select an item to test, then create a test method named after\n      the item.  For example, if you choose to test\n      <i>action_list.cgi</i>, name your method <i>testActionList</i>.\n      Note: it is necessary to create a name that begins with the\n      string ``test''; JUnit uses reflection to find the test methods\n      to call, by looking for this prefix string.  It won't run\n      methods that don't begin with this string.</p><p>Then, select one or more of the following tests to add to\n      your test method, depending on the page under test.\n      </p><p>Note: if you're clever about the order in which you implement\n      your tests, you can leverage one test to set up the next.  For\n      example, don't test <i>delete_proc_table.cgi</i> until the end;\n      then, you can use successful results of\n      <i>create_process.cgi</i> tests to set up the environment for\n      the others.</p>\""}, {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_test_method", "script": "\"\n\n      Verify that your test compiles and runs before proceeding to the\n      next test:\n      <pre>\n      % make test\n      </pre>\""}], "iteration": {"selection": {"sequence": [{"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "retrieve_page", "script": "\"\n\n\t  The baseline test is an example of how to test simple\n\t  retrieval of a web page: create a <i>request</i> bound to a\n\t  specific url, use the <i>WebConversation</i> to submit the\n\t  request, then examine the <i>response</i> object representing\n\t  the reply.\n\n\t  \""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "create_process", "script": "\"\n\n\t  You will need to create a process instance to test some\n\t  operations, such as the <i>action_page.cgi</i>.  This is\n\t  easy: just submit a request for <i>create_process.cgi</i>\n\t  with the name of the process:\n\t  <pre>\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  WebRequest request = \n\t  \t  new GetMethodWebRequest(site \n\t  \t\t\t\t  + &quot;create_process.cgi?&quot;\n\t  \t\t\t\t  + &quot;model=test_action.pml&quot;\n\t  \t\t\t\t  + &quot;&process_filename=&quot; + proc_table);\n\t  \n\t  // Submit request and get reply.\n\t  WebResponse response = conversation.getResponse(request);\n\t  \n\t  // Verify title and heading of response page.\n\t  // The response to create_process is the Action List page.\n\t  String title = response.getTitle();\n\t  assertNotNull(title);\n\t  assertEquals(&quot;Action List&quot;, title);\n\t  assertTrue(-1 != response.getText().indexOf(&quot;&lt;h1&gt;Action List&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "reset_process_table", "script": "\"\n\n\t  Some tests will require a ``clean'' environment, in which no\n\t  processes have been created.  Use\n\t  <i>delete_proc_table.cgi</i> to delete the process table and\n\t  thus reset the environment:\n\t  <pre>\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  assertNotNull(proc_table);\n\t  WebRequest request = \n\t      new GetMethodWebRequest(site \n\t\t\t\t      + &quot;delete_proc_table.cgi?&quot;\n\t\t\t\t      + &quot;process_filename=&quot; + proc_table);\n\n\t  // Submit request and get reply.\n\t  WebResponse response = conversation.getResponse(request);\n\n\t  // Verify title and heading of response page.\n\t  // The response to delete_proc_table.cgi is a message confirming\n\t  // delete.  \n\t  String title = response.getTitle();\n\t  assertNotNull(title);\n\t  assertEquals(&quot;Delete Process Table&quot;, title);\n\t  assertTrue(-1 != response.getText().indexOf(&quot;&lt;h1;&gt;Delete Process Table&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_links", "script": "\"\n\n\t  A page containing links can be verified by examining the text\n\t  between the anchor tags, or the link url.  \n\n\t  <p>Use the <i>WebResponse</i> object's <i>getLinkWith()</i>\n\t  method to find a link with specific text within anchor tags.\n\t  For example, to find the ``overview'' link in a page, do </p><pre>\n\t  // Get 'overview' link from form.\n\t  WebLink link = response.getLinkWith(&quot;overview&quot;);\n\t  assertNotNull(link);\n\t  </pre><p>Then, you can verify the the link's url with\n\t  <i>getURLString()</i>:</p><pre>\n\t  assertEquals(&quot;action_page.cgi?pid=0&act_name=overview&quot; + \n\t\t       &quot;&process_filename=&quot; + proc_table,\n\t\t       link.getURLString());\n\t  </pre><p>Another way to look at links is to retrieve all of the\n\t  links in a page, then look at their attributes one at a\n\t  time:</p><pre>\n\t  // Verify links.  This process only has two links: ``test_script''\n\t  // and ``Create Process''.\n\t  WebLink links[] = response.getLinks();\n\t  int i = 0;\n\t  assertEquals(&quot;test_script&quot;, links[i].asText());\n\t  assertEquals(&quot;action_page.cgi?pid=0&act_name=test_script&quot; + \n\t\t       &quot;&process_filename=&quot; + proc_table,\n\t\t       links[i].getURLString());\n\t  i++;\n\t  // Next link is ``Create Process'' link at bottom of page.\n\t  assertEquals(&quot;Create Process&quot;, links[i].asText());\n\t  assertEquals(&quot;process_listing.cgi?&quot; + \n\t\t       &quot;process_filename=&quot; + proc_table,\n\t\t       links[i].getURLString());\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "follow_link", "script": "\"<p>Links aren't much use if they can't be followed.  HTTPUnit\n\t  provides a facility for following links, simulating a mouse\n\t  click on the anchor text.  This is achieved through the\n\t  <i>WebLink</i> object's <i>click()</i>method:</p><pre>\n\t  // See if there's anything on the other end.\n\t  WebResponse linkEnd = links[i].click();\n\t  assertNotNull(linkEnd.getTitle());\n\t  assertEquals(&quot;test_script&quot;, linkEnd.getTitle());\n\t  assertTrue(-1 != linkEnd.getText().indexOf(&quot;&lt;h1&gt;test_script&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_parameters", "script": "\"<p>Most of the web pages we will test are actually forms.\n\t  HTTPUnit provides many facilities for examining and\n\t  manipulating forms.</p><p>For example, you might want to examine a form's\n\t  parameters; we used this in the baseline test to obtain the\n\t  process table name, which is a ``hidden'' parameter in most\n\t  of our forms:</p><pre>\n\t   <input type=&quot;hidden&quot; name=&quot;process_filename&quot; value=&quot;dfTqHEvIkEM2.dat&quot;>\n\t  </pre><p>We retrieved this parameter using the <i>WebForm</i>\n\t  object's <i>getParameterValue()</i> method, which takes the\n\t  parameter name as argument and returns the parameter's value\n\t  attribute:</p><pre>\n\t   WebForm form = response.getForms()[0];\n\t   proc_table = form.getParameterValue(&quot;process_filename&quot;);\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "submit_form", "script": "\"\n\n\t  You can also submit a form, once you have obtained it using\n\t  the <i>WebResponse</i> objects <i>getForms()</i> method.\n\n\t  <p><i>WebForm</i> provides a <i>setParameter()</i> method to set\n\t  the values of a forms parameters, and a <i>submit()</i>\n\t  method that simulates form submission.</p><pre>\n\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  WebRequest  request = \n\t      new GetMethodWebRequest(site + &quot;handle_run.cgi?&quot;\n\t\t\t\t      + &quot;resource_type=requires&quot; \n\t\t\t\t      + &quot;&process_filename=&quot; + proc_table\n\t\t\t\t      + &quot;&pid=0&quot;\n\t\t\t\t      + &quot;&act_name=test_script&quot;);\n\n\t  WebResponse response = conversation.getResponse( request );\n\t  WebForm bindingForm = response.getForms()[0];\n\t  bindingForm.setParameter(&quot;test_resource&quot;, &quot;/home/jnoll/lib/httpunit&quot;);\n\t  bindingForm.submit();\n\n\t  // The response is now the conversation's current page.\n\t  response = conversation.getCurrentPage();\n\t  assertEquals(&quot;test_script&quot;, response.getTitle());\n\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "examine_table", "script": "(null)"}}]}}}, "@model": "./../../models/web_test.pml"}, {"action": [{"@state": "READY", "@name": "overview", "script": "\"<p>In this exercise, you will create a set of tests for the Web\n    interface to the PML virtual machine, using JUnit and HTTPUnit.\n    The procedure is an abbreviated version of Tamres incremental\n    approach; the baseline is provided for you, you just need to do\n    the inventory.</p><p>JUnit is a Java framework for creating and running unit and\n    functional tests.  HTTPUnit is a set of java classes that one\n    uses in conjunction with JUnit for testing web sites.</p>\""}, {"@state": "AVAILABLE", "prov_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_working_directory", "script": "\"<p>Create a working directory to contain the java files that\n      implement your tests.  You <b>must</b> set permissions on the\n      path to your working directory so that the PEOS web interface\n      can traverse the path and read your test files.</p><pre>\n      % cd\n      % chmod a+X .\n      % mkdir coen286\n      % chmod a+X coen286\n      % cd coen286\n      % mkdir web_test\n      % chmod a+Xr web_test\n      </pre><p>Please pay particular attention to the last <i>chmod</i>; you\n      must make your working directory both <i>executable</i> (`+X')\n      and <i>readable</i> (`+r'), \n      so that the PML Web interface can read and display your files\n      when requested.  The other directories need only be\n      <i>executable.</i></p><p>Note: this only grants read access to your working directory;\n      and only allows others to traverse, but not read, the\n      directories in the path leading to your working directory. This\n      enables the PEOS web interface to find your test files and other\n      resources in your working directory, but does not allow anyone to\n      actually list any of your directories except for your working\n      directory.</p>\""}, {"@state": "NONE", "prov_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_test_file", "script": "\"\n\n      HTTPUnit and JUnit are written in Java, and require tests to be\n      written in Java as well. Create a Java file to contain your test\n      code (called a Test Case in JUnit terminology).  You must also\n      set permissions on the test file so that the PEOS web interface\n      can traverse the path and read your test files.\n      <pre>\n      % cd ~/coen286/web_test\n      % touch WebUITest.java\n      % chmod a+r WebUITest.java\n      </pre>\n      Note: the last step is necessary to grant access to the PEOS web\n      ui.\n\n      Put the following skeleton in your java test file, then modify\n      the values of the <i>login</i> and <i>password</i> variables.\n      Set the <i>login</i> variable to the <i>test</i> id you received\n      via email; the password is the same for both IDs.\n      <pre>\n      import java.lang.*;\n      import com.meterware.httpunit.*;\n\n      import java.io.IOException;\n      import java.net.MalformedURLException;\n\n      import org.xml.sax.*;\n      import org.w3c.dom.*;\n\n      import junit.framework.*;\n\n\n      /**\n       * An example of testing web2 using httpunit and JUnit.\n       **/\n      public class WebUITest extends TestCase {\n\n\t  String site = &quot;http://linux.students.engr.scu.edu/~jnoll/PEOS/cgi-bin/&quot;;\n\t  String login = &quot;(your test login)&quot;;\n\t  String passwd = &quot;(your password)&quot;;\n\t  // Static, so initialization in Baseline persists.\n\t  static String proc_table; \n\n\n\t  public static void main(String args[]) {\n\t      junit.textui.TestRunner.run( suite() );\n\t  }\n\n\t  public static Test suite() {\n\t      return new TestSuite( WebUITest.class );\n\t  }\n\n\t  public WebUITest( String name ) {\n\t      super( name );\n\t  }\n\n\t  public void testBaseline () throws Exception {\n\t      assertTrue(0 == 0);\n\t  }\n      }\n      </pre><p>Be sure to include the <i>main()</i>and <i>suite()</i>methods in\n      addition to the constructor; JUnit uses these to run your tests.</p><p>Note: The JUnit <i>TestCase</i> class corresponds to our notion\n      of test procedures.  The methods of this class are close to our\n      concept of test case.</p><p>To verify that everything is set up correctly, this skeleton\n      includes a simple test method to your class that will be run by\n      JUnit when the test is run:</p><pre>\n      assertTrue(0 == 0);\n      </pre>\n      will result in a `.' appearing in the output, indicating a test\n      was run and passed.\n\n      \""}, {"@state": "NONE", "prov_resource": {"@name": "Makefile", "@value": "/Makefile", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_makefile", "script": "\"\n\n      Create a Makefile to automate the build and run cycle: \n      <pre>\n      % touch Makefile\n      % chmod a+r Makefile\n      </pre>\n      Put the following macros and rules in the Makefile (please be\n      sure to include the 'test' rule, so I can easily run your tests by\n      typing 'make test'). \n      <pre>\n      HTTPUNIT = /home/jnoll/lib/httpunit-1.5.4\n      CLASSPATH = .:..:$(HTTPUNIT)/lib/httpunit.jar:$(HTTPUNIT)/jars/junit.jar:$(HTTPUNIT)/jars/nekohtml.jar:$(HTTPUNIT)/jars/Tidy.jar:$(HTTPUNIT)/jars/xmlParserAPIs.jar:$(HTTPUNIT)/jars/xercesImpl.jar:$(HTTPUNIT)/jars/js.jar\n      \n      JAVAC = javac\n      JAVA = java\n      \n      test: WebUITest.class\n      \t       $(JAVA) -classpath $(CLASSPATH) WebUITest\n      \n      %.class: %.java\n\t       $(JAVAC) -classpath $(CLASSPATH) $<\n      </pre><p>Note: be sure the lines containing JAVA and JAVAC above are\n      preceded by a <i>tab</i> character; make will be confused otherwise.\n      </p>\""}, {"@state": "NONE", "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "verify_setup", "script": "\"\n\n      Verify that your environment has been set up correctly by\n      compiling and running the test.  To do this, you need to add\n      <i>javac</i> and <i>java</i> to your path, which is easily done\n      using the <i>setup</i> command:\n      <pre>\n      % setup jdk\n      % setup gcc\n      </pre>\n      This will automatically add the appropriate environment\n      variables for the current version of JDK, as well as\n      <i>gmake</i>, to your environment.\n\n      <p>Now, test your implementation:</p><pre>\n      % gmake test\n      </pre>\n      You should see something like the following: \n      <pre>\n[jnoll@linux101] ~/src/webtest :make\njavac -classpath .:..:/home/jnoll/lib/httpunit-1.5.4/lib/httpunit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/junit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/nekohtml.jar:/home/jnoll/lib/httpunit-1.5.4/jars/Tidy.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xmlParserAPIs.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xercesImpl.jar:/home/jnoll/lib/httpunit-1.5.4/jars/js.jar WebUITest.java\njava -classpath .:..:/home/jnoll/lib/httpunit-1.5.4/lib/httpunit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/junit.jar:/home/jnoll/lib/httpunit-1.5.4/jars/nekohtml.jar:/home/jnoll/lib/httpunit-1.5.4/jars/Tidy.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xmlParserAPIs.jar:/home/jnoll/lib/httpunit-1.5.4/jars/xercesImpl.jar:/home/jnoll/lib/httpunit-1.5.4/jars/js.jar WebUITest\n.\nTime: 0.003\n\nOK (1 test)\n\n[jnoll@linux101] ~/src/webtest :\n      </pre>\n      Notice the lone '.' before the ``Time: 0.026''.  This indicates\n      a test was run and passed.\n\n      \""}, {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "create_baseline", "script": "\"\n\n    Once you have a working test setup, augment it to interact with\n    the PEOS system. HTTPUnit provides several methods for\n    simulating interactions with a web site. You must first create a\n    ``conversation'' object to encapsulate the interactions with the\n    web site. First, set the <i>login</i> and <i>passwd</i>\n    variables to your <i>test</i> login id and passwd:\n    <pre>\n       String login = &quot;(your test login)&quot;;\n       String passwd = &quot;(your password)&quot;;\n    </pre>\n    Then, replace the body of your <i>testBaseline()</i> with the\n    following:\n    <pre>\n    public void testBaseline() throws Exception {\n    \t  WebConversation conversation = new WebConversation();\n    \t  conversation.setAuthorization(login, passwd);\n    \t  WebRequest request = \n\t      new GetMethodWebRequest(site + &quot;action_list.cgi&quot;);\n    \t  WebResponse response = conversation.getResponse(request);\n    \n    \t  // Verify title and heading of response page.\n    \t  String title = response.getTitle();\n    \t  assertNotNull(title);\n    \t  assertEquals(&quot;Action List&quot;, title);\n    \t  assertTrue(-1 != response.getText().indexOf(&quot;Action List&quot;));\n    \n    \t  // Save the name of the process table; required for future\n    \t  // tests that have to send process table name in the url.\n    \t  WebForm form = response.getForms()[0];\n    \t  proc_table = form.getParameterValue(&quot;process_filename&quot;);\n    \t  assertNotNull(proc_table);\n    }\n    </pre><p>First, note the <i>WebConversation</i> object in the above method\n    definition.  This object manages the sending and receiving of\n    requests and responses to and from the server. The conversation\n    also manages authentication, which is necessary for interacting\n    with the PEOS web site.  Therefore, you must include your test\n    login id and password in the code.</p><p>Next, observe how we sent a request to the web server.  This is\n    done using a <i>request</i> object that is returned by the\n    <i>GetMethodWebRequest()</i> method, which takes a URL as\n    argument.  We pass this object to the <i>WebConversation</i> to\n    send to the web server.  We get the reply contents by asking the\n    <i>WebConversation</i> for the <i>response</i> object.</p><p>The <i>response</i>object represents the reply from the web\n    server. This object can be queried for various constructs that\n    are part of the web page returned, including forms in the page,\n    and parameters in the forms. An important parameter you will\n    want to retrieve is the <i>process_filename</i>, which is the\n    name of the file that stores the process table for your\n    processes. (Each user gets a separate process table, with name\n    derived from the encrypted user name. This is to provide a\n    measure of privacy, so others can't easily obtain your process\n    state, or identify who belongs to a given process table.)\n    Declare an instance variable (say, <i>proc_table</i>) to hold\n    this name (you will need it later), and retrieve it from the\n    response:</p><pre>\n        WebForm form = response.getForms()[0];\n    \t  proc_table = form.getParameterValue(&quot;process_filename&quot;);\n    \t  assertNotNull(proc_table);\n    </pre>\n    Note the use of <i>assertNotNull()</i>. This is a JUnit\n    assertion to assert that its argument is not Null.\n\n    <p>Finally, we employ several HTTPUnit methods to examine the\n    response.  In particular, <i>getTitle()</i> returns the pages\n    title (obviously), and <i>getText()</i> returns the text (not the\n    header) of the page, as html if it is an html page.  For a\n    complete list of HTTPUnit operations, see the <a>HTTPUnit\n    API documentation</a>.</p>\""}, {"@state": "NONE", "prov_resource": {"@name": "readme", "@value": "/README", "@qualifier": ""}, "req_resource": {"@name": "working_directory", "@value": "{}", "@qualifier": ""}, "@name": "create_readme", "script": "\"\n    Create a README file in your working directory, that identifies\n    you and answers a few questions about your experience.  Use the\n    following template as a starting point:\n    <pre>\n      Ed Student\n      123456\n\n      Questions:\n      1. Did you use the ``Check to Indicate Done'' feature of the\n      Action List?\n\n      2. Did you perform any tasks out of order?\n\n      3. Did you ever click the ``Run'' and/or ``Done'' buttons of\n      the Action Page?\n\n      4a. Please assess the PEOS interface as more or less helpful than the\n      static web pages we have used to explain earlier assignments\n      (put an `X' in the box next to your assessment):\n      [ ] definitely more helpful \n      [ ] somewhat more helpful \n      [ ] somewhat less helpful \n      [ ] definitely less helpful\n\n      4b. Please write a brief explanation for your answer to part\n      (a).\n\n      5. Please write any other impressions about your experience\n      here.\n\n    </pre>\""}, {"@state": "NONE", "req_resource": [{"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, {"@name": "readme", "@value": "/README", "@qualifier": ""}], "@name": "submit_results", "script": "\"\n\n    Once you are satisfied with your test suite (and only after you\n    have verified that ALL tests compile and run), submit a tar file\n    via email, according to the <a>submit\n    procedure</a>.\n\n    \""}], "@status": "2", "@pid": "1", "iteration": {"action": [{"@state": "AVAILABLE", "@name": "select_inventory_item", "script": "\"<p>As mentioned previously, the test procedure is an abbreviated\n      form of Tamres incremental approach.  In this phase, you create\n      a test for each ``inventory'' item in the product's input.</p><p>The following cgi pages represent the inventory items to\n      test:</p><ul><li>action_list.cgi</li><li>create_process.cgi</li><li>action_page.cgi</li><li>bind_resources.cgi</li><li>delete_proc_table.cgi</li></ul><p>Select an item to test, then create a test method named after\n      the item.  For example, if you choose to test\n      <i>action_list.cgi</i>, name your method <i>testActionList</i>.\n      Note: it is necessary to create a name that begins with the\n      string ``test''; JUnit uses reflection to find the test methods\n      to call, by looking for this prefix string.  It won't run\n      methods that don't begin with this string.</p><p>Then, select one or more of the following tests to add to\n      your test method, depending on the page under test.\n      </p><p>Note: if you're clever about the order in which you implement\n      your tests, you can leverage one test to set up the next.  For\n      example, don't test <i>delete_proc_table.cgi</i> until the end;\n      then, you can use successful results of\n      <i>create_process.cgi</i> tests to set up the environment for\n      the others.</p>\""}, {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_test_method", "script": "\"\n\n      Verify that your test compiles and runs before proceeding to the\n      next test:\n      <pre>\n      % make test\n      </pre>\""}], "iteration": {"selection": {"sequence": [{"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "retrieve_page", "script": "\"\n\n\t  The baseline test is an example of how to test simple\n\t  retrieval of a web page: create a <i>request</i> bound to a\n\t  specific url, use the <i>WebConversation</i> to submit the\n\t  request, then examine the <i>response</i> object representing\n\t  the reply.\n\n\t  \""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "create_process", "script": "\"\n\n\t  You will need to create a process instance to test some\n\t  operations, such as the <i>action_page.cgi</i>.  This is\n\t  easy: just submit a request for <i>create_process.cgi</i>\n\t  with the name of the process:\n\t  <pre>\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  WebRequest request = \n\t  \t  new GetMethodWebRequest(site \n\t  \t\t\t\t  + &quot;create_process.cgi?&quot;\n\t  \t\t\t\t  + &quot;model=test_action.pml&quot;\n\t  \t\t\t\t  + &quot;&process_filename=&quot; + proc_table);\n\t  \n\t  // Submit request and get reply.\n\t  WebResponse response = conversation.getResponse(request);\n\t  \n\t  // Verify title and heading of response page.\n\t  // The response to create_process is the Action List page.\n\t  String title = response.getTitle();\n\t  assertNotNull(title);\n\t  assertEquals(&quot;Action List&quot;, title);\n\t  assertTrue(-1 != response.getText().indexOf(&quot;&lt;h1&gt;Action List&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "reset_process_table", "script": "\"\n\n\t  Some tests will require a ``clean'' environment, in which no\n\t  processes have been created.  Use\n\t  <i>delete_proc_table.cgi</i> to delete the process table and\n\t  thus reset the environment:\n\t  <pre>\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  assertNotNull(proc_table);\n\t  WebRequest request = \n\t      new GetMethodWebRequest(site \n\t\t\t\t      + &quot;delete_proc_table.cgi?&quot;\n\t\t\t\t      + &quot;process_filename=&quot; + proc_table);\n\n\t  // Submit request and get reply.\n\t  WebResponse response = conversation.getResponse(request);\n\n\t  // Verify title and heading of response page.\n\t  // The response to delete_proc_table.cgi is a message confirming\n\t  // delete.  \n\t  String title = response.getTitle();\n\t  assertNotNull(title);\n\t  assertEquals(&quot;Delete Process Table&quot;, title);\n\t  assertTrue(-1 != response.getText().indexOf(&quot;&lt;h1;&gt;Delete Process Table&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_links", "script": "\"\n\n\t  A page containing links can be verified by examining the text\n\t  between the anchor tags, or the link url.  \n\n\t  <p>Use the <i>WebResponse</i> object's <i>getLinkWith()</i>\n\t  method to find a link with specific text within anchor tags.\n\t  For example, to find the ``overview'' link in a page, do </p><pre>\n\t  // Get 'overview' link from form.\n\t  WebLink link = response.getLinkWith(&quot;overview&quot;);\n\t  assertNotNull(link);\n\t  </pre><p>Then, you can verify the the link's url with\n\t  <i>getURLString()</i>:</p><pre>\n\t  assertEquals(&quot;action_page.cgi?pid=0&act_name=overview&quot; + \n\t\t       &quot;&process_filename=&quot; + proc_table,\n\t\t       link.getURLString());\n\t  </pre><p>Another way to look at links is to retrieve all of the\n\t  links in a page, then look at their attributes one at a\n\t  time:</p><pre>\n\t  // Verify links.  This process only has two links: ``test_script''\n\t  // and ``Create Process''.\n\t  WebLink links[] = response.getLinks();\n\t  int i = 0;\n\t  assertEquals(&quot;test_script&quot;, links[i].asText());\n\t  assertEquals(&quot;action_page.cgi?pid=0&act_name=test_script&quot; + \n\t\t       &quot;&process_filename=&quot; + proc_table,\n\t\t       links[i].getURLString());\n\t  i++;\n\t  // Next link is ``Create Process'' link at bottom of page.\n\t  assertEquals(&quot;Create Process&quot;, links[i].asText());\n\t  assertEquals(&quot;process_listing.cgi?&quot; + \n\t\t       &quot;process_filename=&quot; + proc_table,\n\t\t       links[i].getURLString());\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "follow_link", "script": "\"<p>Links aren't much use if they can't be followed.  HTTPUnit\n\t  provides a facility for following links, simulating a mouse\n\t  click on the anchor text.  This is achieved through the\n\t  <i>WebLink</i> object's <i>click()</i>method:</p><pre>\n\t  // See if there's anything on the other end.\n\t  WebResponse linkEnd = links[i].click();\n\t  assertNotNull(linkEnd.getTitle());\n\t  assertEquals(&quot;test_script&quot;, linkEnd.getTitle());\n\t  assertTrue(-1 != linkEnd.getText().indexOf(&quot;&lt;h1&gt;test_script&lt;/h1&gt;&quot;));\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "verify_parameters", "script": "\"<p>Most of the web pages we will test are actually forms.\n\t  HTTPUnit provides many facilities for examining and\n\t  manipulating forms.</p><p>For example, you might want to examine a form's\n\t  parameters; we used this in the baseline test to obtain the\n\t  process table name, which is a ``hidden'' parameter in most\n\t  of our forms:</p><pre>\n\t   <input type=&quot;hidden&quot; name=&quot;process_filename&quot; value=&quot;dfTqHEvIkEM2.dat&quot;>\n\t  </pre><p>We retrieved this parameter using the <i>WebForm</i>\n\t  object's <i>getParameterValue()</i> method, which takes the\n\t  parameter name as argument and returns the parameter's value\n\t  attribute:</p><pre>\n\t   WebForm form = response.getForms()[0];\n\t   proc_table = form.getParameterValue(&quot;process_filename&quot;);\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "submit_form", "script": "\"\n\n\t  You can also submit a form, once you have obtained it using\n\t  the <i>WebResponse</i> objects <i>getForms()</i> method.\n\n\t  <p><i>WebForm</i> provides a <i>setParameter()</i> method to set\n\t  the values of a forms parameters, and a <i>submit()</i>\n\t  method that simulates form submission.</p><pre>\n\n\t  WebConversation conversation = new WebConversation();\n\t  conversation.setAuthorization(login, passwd);\n\t  WebRequest  request = \n\t      new GetMethodWebRequest(site + &quot;handle_run.cgi?&quot;\n\t\t\t\t      + &quot;resource_type=requires&quot; \n\t\t\t\t      + &quot;&process_filename=&quot; + proc_table\n\t\t\t\t      + &quot;&pid=0&quot;\n\t\t\t\t      + &quot;&act_name=test_script&quot;);\n\n\t  WebResponse response = conversation.getResponse( request );\n\t  WebForm bindingForm = response.getForms()[0];\n\t  bindingForm.setParameter(&quot;test_resource&quot;, &quot;/home/jnoll/lib/httpunit&quot;);\n\t  bindingForm.submit();\n\n\t  // The response is now the conversation's current page.\n\t  response = conversation.getCurrentPage();\n\t  assertEquals(&quot;test_script&quot;, response.getTitle());\n\n\t  </pre>\""}}, {"action": {"@state": "NONE", "req_resource": {"@name": "junit_test_file", "@value": "/WebUITest.java", "@qualifier": ""}, "@name": "examine_table", "script": "(null)"}}]}}}, "@model": "./../../models/web_test.pml"}]}}